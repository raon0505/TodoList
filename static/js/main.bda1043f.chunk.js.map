{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","type","TodoListItem","todo","onToggle","onRemove","id","text","checked","Classnames","onClick","TodoList","todos","map","key","App","setTodos","nextId","useRef","length","current","concat","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAYeA,G,MATM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,OACI,6BAASC,UAAU,cACf,yBAAKA,UAAU,sBAAqB,wBAAIA,UAAU,iBAAd,6BACpC,yBAAKA,UAAU,WAAWD,M,OCuBvBE,G,MA1BI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACPC,mBAAS,IADF,mBAC1BC,EAD0B,KACnBC,EADmB,KAG3BC,EAAWC,uBAAY,SAAAC,GACzBH,EAASG,EAAEC,OAAOL,SACnB,IAEGM,EAAWH,uBACb,SAAAC,GACIN,EAASE,GACTC,EAAS,IACTG,EAAEG,mBAEN,CAACT,EAAUE,IAGf,OACI,0BAAMM,SAAUA,GACZ,2BAAOV,UAAU,0BAA0BY,YAAY,qDAAaR,MAAOA,EAAOE,SAAUA,IAC5F,4BAAQN,UAAU,qBAAqBa,KAAK,UACxC,kBAAC,IAAD,U,gBCADC,G,MAfM,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC5BC,EAAsBH,EAAtBG,GAAIC,EAAkBJ,EAAlBI,KAAMC,EAAYL,EAAZK,QAClB,OACI,yBAAKpB,UAAU,gBACX,yBAAKA,UAAWqB,IAAW,WAAY,CAAED,YAAYE,QAAS,kBAAMN,EAASE,KACxEE,EAAU,kBAAC,IAAD,MAAiB,kBAAC,IAAD,MAC5B,yBAAKpB,UAAU,QAAQmB,IAE3B,yBAAKnB,UAAU,SAASsB,QAAS,kBAAML,EAASC,KAC5C,kBAAC,IAAD,UCJDK,G,MAVE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOR,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACjC,OACI,yBAAKjB,UAAU,YACVwB,EAAMC,KAAI,SAAAV,GAAI,OACX,kBAAC,EAAD,CAAcA,KAAMA,EAAMW,IAAKX,EAAKG,GAAIF,SAAUA,EAAUC,SAAUA,UC0CvEU,EA7CH,WAAO,IAAD,EACUxB,mBAAS,IADnB,mBACTqB,EADS,KACFI,EADE,KAIVC,EAASC,iBAAON,EAAMO,OAAS,GAE/B7B,EAAWK,uBACf,SAAAY,GACE,IAAMJ,EAAO,CACXG,GAAIW,EAAOG,QACXb,OACAC,SAAS,GAEXQ,EAASJ,EAAMS,OAAOlB,IACtBc,EAAOG,YAET,CAACR,IAGGR,EAAWT,uBACf,SAAAW,GACEU,EACEJ,EAAMC,KAAI,SAAAV,GAAI,OACZA,EAAKG,KAAOA,EAAZ,eAAsBH,EAAtB,CAA4BK,SAAUL,EAAKK,UAAYL,QAI7D,CAACS,IAGGP,EAAWV,uBACf,SAAAW,GACEU,EAASJ,EAAMU,QAAO,SAAAnB,GAAI,OAAIA,EAAKG,KAAOA,QAE5C,CAACM,IAGH,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYtB,SAAUA,IACtB,kBAAC,EAAD,CAAUsB,MAAOA,EAAOR,SAAUA,EAAUC,SAAUA,MCjCxCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bda1043f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoTemplate.css';\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n    return (\r\n        <section className=\"background\">\r\n            <div className=\"title dark-primary\"><h1 className=\"on-background\">일정관리</h1></div>\r\n            <div className=\"content\">{children}</div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default TodoTemplate;","import React, { useState, useCallback } from 'react';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport './TodoInsert.css'\r\n\r\nconst TodoInsert = ({ onInsert }) => {\r\n    const [value, setValue] = useState('');\r\n\r\n    const onChange = useCallback(e => {\r\n        setValue(e.target.value);\r\n    }, []);\r\n\r\n    const onSubmit = useCallback(\r\n        e => {\r\n            onInsert(value);\r\n            setValue('');\r\n            e.preventDefault();\r\n        },\r\n        [onInsert, value],\r\n    )\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <input className=\"dark-primary on-surface\" placeholder=\"할 일을 입력하세요\" value={value} onChange={onChange} />\r\n            <button className=\"primary on-primary\" type=\"submit\">\r\n                <MdAdd />\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoInsert;","import React from 'react';\r\nimport {\r\n    MdCheckBoxOutlineBlank,\r\n    MdCheckBox,\r\n    MdRemoveCircleOutline,\r\n} from 'react-icons/md';\r\nimport Classnames from 'classnames'\r\nimport './TodoListItem.css';\r\n\r\nconst TodoListItem = ({ todo, onToggle, onRemove }) => {\r\n    const { id, text, checked } = todo;\r\n    return (\r\n        <div className=\"TodoListItem\">\r\n            <div className={Classnames('checkbox', { checked })} onClick={() => onToggle(id)}>\r\n                {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n                <div className=\"text\">{text}</div>\r\n            </div>\r\n            <div className=\"remove\" onClick={() => onRemove(id)}>\r\n                <MdRemoveCircleOutline />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoListItem;","import React from 'react';\r\nimport TodoListItem from './TodoListItem';\r\nimport './TodoList.css'\r\n\r\nconst TodoList = ({ todos, onToggle, onRemove }) => {\r\n    return (\r\n        <div className=\"TodoList\">\r\n            {todos.map(todo => (\r\n                <TodoListItem todo={todo} key={todo.id} onToggle={onToggle} onRemove={onRemove} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, { useState, useRef, useCallback } from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  const [todos, setTodos] = useState([\n  ]);\n\n  const nextId = useRef(todos.length + 1);\n\n  const onInsert = useCallback(\n    text => {\n      const todo = {\n        id: nextId.current,\n        text,\n        checked: false\n      };\n      setTodos(todos.concat(todo));\n      nextId.current++;\n    },\n    [todos],\n  )\n\n  const onToggle = useCallback(\n    id => {\n      setTodos(\n        todos.map(todo =>\n          todo.id === id ? { ...todo, checked: !todo.checked } : todo,\n        ),\n      );\n    },\n    [todos],\n  )\n\n  const onRemove = useCallback(\n    id => {\n      setTodos(todos.filter(todo => todo.id !== id));\n    },\n    [todos],\n  )\n\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todos={todos} onToggle={onToggle} onRemove={onRemove} />\n    </TodoTemplate>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}